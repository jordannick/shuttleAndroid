
    Nav drawer style:
    black = 191b1b
    red = fd4f1a
    white = e9e9e9
    white2 = efefef
    white3 = dddddd


    public void addDrawerItem(){
        double a = Math.random()%10;
        Random random = new Random();
        int b = random.nextInt(100);

        String str = String.valueOf(b);


        Marker marker = mMap.addMarker(new MarkerOptions().position(new LatLng(0, 0)).title("booya"));
        ShuttleMarker shuttleMarker = new ShuttleMarker(marker, b);

        mShuttleMarkerList.add(shuttleMarker);
        DrawerItem drawerItem = new DrawerItem(1, str, shuttleMarker);
        mDrawerItems.add(drawerItem);
        Log.d(TAG, "Adding drawerItem: " + drawerItem.getTitle());
    }


   LinkedList<Shuttle.ShuttleEta> northLinkedList = new LinkedList<Shuttle.ShuttleEta>();
   LinkedList<Shuttle.ShuttleEta> west1LinkedList = new LinkedList<Shuttle.ShuttleEta>();
   LinkedList<Shuttle.ShuttleEta> west2LinkedList = new LinkedList<Shuttle.ShuttleEta>();
   LinkedList<Shuttle.ShuttleEta> eastLinkedList = new LinkedList<Shuttle.ShuttleEta>();

   ArrayList<Stop> stops = sMapState.getStops();
   for(int i = 0, len = stops.size(); i < len; i++) {
       Stop stop = stops.get(i);
       int[] ETAs = stop.getShuttleETAs();
       Shuttle.ShuttleEta newNorthEta = new Shuttle.ShuttleEta();
       newNorthEta.name = stop.getName();
       newNorthEta.time = ETAs[0];
       Shuttle.ShuttleEta newWest1Eta = new Shuttle.ShuttleEta();
       newWest1Eta.name = stop.getName();
       newWest1Eta.time = ETAs[1];
       Shuttle.ShuttleEta newWest2Eta = new Shuttle.ShuttleEta();
       newWest2Eta.name = stop.getName();
       newWest2Eta.time = ETAs[2];
       Shuttle.ShuttleEta newEastEta = new Shuttle.ShuttleEta();
       newEastEta.name = stop.getName();
       newEastEta.time = ETAs[3];

       northLinkedList = addEtaIfNeeded(northLinkedList, i , newNorthEta);
       west1LinkedList = addEtaIfNeeded(west1LinkedList, i , newWest1Eta);
       west2LinkedList = addEtaIfNeeded(west2LinkedList, i , newWest2Eta);
       eastLinkedList = addEtaIfNeeded(eastLinkedList, i , newEastEta);
   }
   shuttles.get(0).setUpcomingStops(northLinkedList);
   shuttles.get(1).setUpcomingStops(west1LinkedList);
   shuttles.get(2).setUpcomingStops(west2LinkedList);
   shuttles.get(3).setUpcomingStops(eastLinkedList);


  /* stops = sMapState.getStops();
   for(int i = 0; i < stops.size(); i++) {
       //Log.d(TAG, "1stopShuttleETAS: " + stops.get(i).getShuttleETAs()[0] + " , " + stops.get(i).getShuttleETAs()[1] + " , " + stops.get(i).getShuttleETAs()[2] + " , " + stops.get(i).getShuttleETAs()[3] + " , ");
   }*/
}
private LinkedList<Shuttle.ShuttleEta> addEtaIfNeeded(LinkedList<Shuttle.ShuttleEta> list, int index, Shuttle.ShuttleEta newEta){
    if(newEta.time == -1) return list;
    switch (index) {
        case 0:
            list.add(newEta);
            break;
        case 1:
            if (newEta.time < list.getFirst().time)
                list.addFirst(newEta);
            else list.add(newEta);
            break;
        case 2:
            if (newEta.time < list.getFirst().time)
                list.addFirst(newEta);
            else if (newEta.time < list.get(1).time)
                list.add(1, newEta);
            else list.add(newEta);
            break;
        default:
            if (newEta.time < list.getFirst().time) {
                list.addFirst(newEta);
                list.removeLast();
            } else if (newEta.time < list.get(1).time) {
                list.add(1, newEta);
                list.removeLast();
            } else if (newEta.time < list.get(2).time) {
                list.add(2, newEta);
                list.removeLast();
            }
    }
    return list;
}



/*
    //Test Times
   ArrayList<Stop> stops = sMapState.getStops();
   if (stops != null) {
       Random random = new Random();
       int maxNum = 16;
       Marker marker = sMapState.getSelectedStopMarker();
       for (int i = 0, len = stops.size(); i < len; i++) {
           Stop stop = stops.get(i);
           int[] oldTimes = null;
           boolean checkOld = false;

           if(marker != null) {
               if (sMapState.getSelectedStopMarker().equals(stop.getMarker())) {
                   oldTimes = stop.getShuttleETAs();
                   checkOld = true;
               }
           }

           int num0 = random.nextInt(maxNum/2);
           int num1 = random.nextInt((maxNum-num0)/2)+num0;
           int num2 = random.nextInt(maxNum-num1-2)+num1;
           int num3 = random.nextInt(maxNum-num2)+num2;

           stop.setShuttleETAs(new int[]{num0, num1, num2, num3});

           if(checkOld && stop.getShuttleETAs() != oldTimes){
               sMapState.getSelectedStopMarker().showInfoWindow();
           }

       }
   }
    */